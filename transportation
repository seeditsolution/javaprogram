package codechef;
import java.util.*;
public class Transportation {
	LinkedList<Integer>adj[];
	Transportation(int v){
		adj=new LinkedList[v+1];
		for(int i=0;i<v;i++) {
			adj[i]=new LinkedList<>();
		}
	}
	void addEdge(int u,int v) {
		adj[u].add(v);
	}
	boolean bfs(int s,int t) {
		Queue<Integer>q=new LinkedList<>();
		boolean visited[]=new boolean[adj.length];
		
		q.add(s);
		visited[s]=true;
		while(!q.isEmpty()) {
			s=q.poll();
			if(s==t) {
				//System.out.println("yes");
				return true;
			}
			
			
			//return s;
		//	System.out.println(s);
			
			Iterator<Integer>i=adj[s].listIterator();
			while(i.hasNext()) {
				int n=i.next();
				if(!visited[n]) {
					q.add(n);
					visited[n]=true;
				}
			}
			
		
		}
		return false;
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int t=sc.nextInt();
		int arr[]=new int [n];
		for(int i=1;i<n;i++) {
			arr[i]=sc.nextInt();
			
		}
		Transportation to=new Transportation(n);
		for(int i=1;i<t;i++) {
			int ad=i+arr[i];
			to.addEdge(i, ad);
			System.out.println(i+" "+ad);
		}
		if(to.bfs(1, t)){
			System.out.println("YES");
		}
		else {
			System.out.println("NO");
		}
		
		
		
		
	}

}
